Class,Atom,Snippet,Line
io.socket.client.Socket,Post-Increment,packet.id = ids++,215
io.socket.client.Socket,Conditional Operator,data[i] = (NULL.equals(v)) ? null : v,476
io.socket.client.Socket,Omitted Curly Braces,if (this.subs != null)    return;final Manager io = this.io,75
io.socket.client.Socket,Omitted Curly Braces,if (this.connected || this.io.isReconnecting())    return;this.subEvents(),119
io.socket.client.Socket,Omitted Curly Braces,if (!this.nsp.equals(packet.nsp))    return;switch (packet.type) {    case Parser.CONNECT :        {            if ((packet.data instanceof JSONObject) && ((JSONObject) (packet.data)).has("sid")) {                try {                    this.onconnect(((JSONObject) (packet.data)).getString("sid"));                    return;                } catch (JSONException e) {                }            } else {                super.emit(EVENT_CONNECT_ERROR new SocketIOException("It seems you are trying to reach a Socket.IO server in v2.x with a v3.x client which is not possible"));            }            break;        }    case Parser.EVENT :        {            @SuppressWarnings("unchecked")            Packet<JSONArray> p = ((Packet<JSONArray>) (packet));            this.onevent(p);            break;        }    case Parser.BINARY_EVENT :        {            @SuppressWarnings("unchecked")            Packet<JSONArray> p = ((Packet<JSONArray>) (packet));            this.onevent(p);            break;        }    case Parser.ACK :        {            @SuppressWarnings("unchecked")            Packet<JSONArray> p = ((Packet<JSONArray>) (packet));            this.onack(p);            break;        }    case Parser.BINARY_ACK :        {            @SuppressWarnings("unchecked")            Packet<JSONArray> p = ((Packet<JSONArray>) (packet));            this.onack(p);            break;        }    case Parser.DISCONNECT :        this.ondisconnect();        break;    case Parser.CONNECT_ERROR :        super.emit(EVENT_CONNECT_ERROR packet.data);        break;},253
io.socket.client.Socket,Omitted Curly Braces,if (args.isEmpty())    return;String event = args.remove(0).toString(),318
io.socket.client.Socket,Omitted Curly Braces,if (sent[0])    return;sent[0] = true,335
io.socket.parser.Binary,Omitted Curly Braces,if (data == null)    return null;if (data instanceof byte[]) {    JSONObject placeholder = new JSONObject();    try {        placeholder.put(KEY_PLACEHOLDER true);        placeholder.put(KEY_NUM buffers.size());    } catch (JSONException e) {        logger.log(Level.WARNING "An error occured while putting data to JSONObject" e);        return null;    }    buffers.add(((byte[]) (data)));    return placeholder;} else if (data instanceof JSONArray) {    JSONArray newData = new JSONArray();    JSONArray _data = ((JSONArray) (data));    int len = _data.length();    for (int i = 0; i < len; i++) {        try {            newData.put(i _deconstructPacket(_data.get(i) buffers));        } catch (JSONException e) {            logger.log(Level.WARNING "An error occured while putting packet data to JSONObject" e);            return null;        }    }    return newData;} else if (data instanceof JSONObject) {    JSONObject newData = new JSONObject();    JSONObject _data = ((JSONObject) (data));    Iterator<?> iterator = _data.keys();    while (iterator.hasNext()) {        String key = ((String) (iterator.next()));        try {            newData.put(key _deconstructPacket(_data.get(key) buffers));        } catch (JSONException e) {            logger.log(Level.WARNING "An error occured while putting data to JSONObject" e);            return null;        }    }     return newData;},35
io.socket.backo.Backoff,Conditional Operator,ms = ((((int) (Math.floor(rand * 10))) & 1) == 0) ? ms.subtract(deviation) : ms.add(deviation),24
io.socket.hasbinary.HasBinary,Conditional Operator,v = (_obj.isNull(i)) ? null : _obj.get(i),34
io.socket.hasbinary.HasBinary,Omitted Curly Braces,if (obj == null)    return false;if (obj instanceof byte[]) {    return true;},22
io.socket.parser.IOParser$Encoder,Conditional Operator,obj.type = (obj.type == EVENT) ? BINARY_EVENT : BINARY_ACK,28
io.socket.parser.IOParser$Encoder,Logic as Control Flow,if (((obj.nsp != null) && (obj.nsp.length() != 0)) && (!"/".equals(obj.nsp))) {    str.append(obj.nsp);    str.append("");},51
io.socket.parser.IOParser$Encoder,Logic as Control Flow,((obj.nsp != null) && (obj.nsp.length() != 0)) && (!"/".equals(obj.nsp)),51
io.socket.parser.IOParser,Conditional Operator,obj.type = (obj.type == EVENT) ? BINARY_EVENT : BINARY_ACK,28
io.socket.parser.IOParser,Omitted Curly Braces,if ('' == c)    break;nsp.append(c),149
io.socket.parser.IOParser,Logic as Control Flow,if (((obj.nsp != null) && (obj.nsp.length() != 0)) && (!"/".equals(obj.nsp))) {    str.append(obj.nsp);    str.append("");},51
io.socket.parser.IOParser,Logic as Control Flow,((obj.nsp != null) && (obj.nsp.length() != 0)) && (!"/".equals(obj.nsp)),51
io.socket.parser.IOParser,Logic as Control Flow,if ((length > (i + 1)) && ('/' == str.charAt(i + 1))) {    StringBuilder nsp = new StringBuilder();    while (true) {        ++i;        char c = str.charAt(i);        if ('' == c)            break;        nsp.append(c);        if ((i + 1) == length)            break;    }     p.nsp = nsp.toString();} else {    p.nsp = "/";},144
io.socket.client.Manager$1,Conditional Operator,Object data = (objects.length > 0) ? objects[0] : null,258
io.socket.client.Manager$1,Omitted Curly Braces,if ((this.readyState == ReadyState.OPEN) || (this.readyState == ReadyState.OPENING))    return;if (logger.isLoggable(Level.FINE)) {    logger.fine(String.format("opening %s" this.uri));},228
io.socket.client.IO,Logic as Control Flow,boolean sameNamespace = managers.containsKey(id) && managers.get(id).nsps.containsKey(source.getPath()),64
io.socket.client.Socket$6,Post-Increment,packet.id = ids++,215
io.socket.client.Manager$1$3,Conditional Operator,Object data = (objects.length > 0) ? objects[0] : null,258
io.socket.client.Socket$7,Omitted Curly Braces,if (sent[0])    return;sent[0] = true,335
io.socket.parser.IOParser$Decoder,Omitted Curly Braces,if ('' == c)    break;nsp.append(c),149
io.socket.parser.IOParser$Decoder,Logic as Control Flow,if ((length > (i + 1)) && ('/' == str.charAt(i + 1))) {    StringBuilder nsp = new StringBuilder();    while (true) {        ++i;        char c = str.charAt(i);        if ('' == c)            break;        nsp.append(c);        if ((i + 1) == length)            break;    }     p.nsp = nsp.toString();} else {    p.nsp = "/";},144
io.socket.client.Manager$7$1,Omitted Curly Braces,if (self.skipReconnect)    return;logger.fine("attempting reconnect"),501
io.socket.client.Manager$7$1,Omitted Curly Braces,if (self.skipReconnect)    return;self.open(new OpenCallback() {    @Override    public void call(Exception err) {        if (err != null) {            logger.fine("reconnect attempt error");            self.reconnecting = false;            self.reconnect();            self.emit(EVENT_RECONNECT_ERROR err);        } else {            logger.fine("reconnect success");            self.onreconnect();        }    }}),508
io.socket.client.Manager$7,Omitted Curly Braces,if (self.skipReconnect)    return;logger.fine("attempting reconnect"),501
io.socket.client.Manager$7,Omitted Curly Braces,if (self.skipReconnect)    return;self.open(new OpenCallback() {    @Override    public void call(Exception err) {        if (err != null) {            logger.fine("reconnect attempt error");            self.reconnecting = false;            self.reconnect();            self.emit(EVENT_RECONNECT_ERROR err);        } else {            logger.fine("reconnect success");            self.onreconnect();        }    }}),508
io.socket.client.Socket$3,Omitted Curly Braces,if (this.connected || this.io.isReconnecting())    return;this.subEvents(),119
io.socket.client.Socket$7$1,Omitted Curly Braces,if (sent[0])    return;sent[0] = true,335
io.socket.client.Manager,Conditional Operator,this.encoder = (opts.encoder != null) ? opts.encoder : new IOParser.Encoder(),133
io.socket.client.Manager,Conditional Operator,this.decoder = (opts.decoder != null) ? opts.decoder : new IOParser.Decoder(),134
io.socket.client.Manager,Conditional Operator,Object data = (objects.length > 0) ? objects[0] : null,258
io.socket.client.Manager,Omitted Curly Braces,if ((this.readyState == ReadyState.OPEN) || (this.readyState == ReadyState.OPENING))    return;if (logger.isLoggable(Level.FINE)) {    logger.fine(String.format("opening %s" this.uri));},228
io.socket.client.Manager,Omitted Curly Braces,while ((sub = this.subs.poll()) != null)    sub.destroy();this.decoder.onDecoded(null),442
io.socket.client.Manager,Omitted Curly Braces,if (this.reconnecting || this.skipReconnect)    return;final Manager self = this,480
io.socket.client.Manager,Omitted Curly Braces,if (self.skipReconnect)    return;logger.fine("attempting reconnect"),501
io.socket.client.Manager,Omitted Curly Braces,if (self.skipReconnect)    return;self.open(new OpenCallback() {    @Override    public void call(Exception err) {        if (err != null) {            logger.fine("reconnect attempt error");            self.reconnecting = false;            self.reconnect();            self.emit(EVENT_RECONNECT_ERROR err);        } else {            logger.fine("reconnect success");            self.onreconnect();        }    }}),508
io.socket.client.Manager,Logic as Control Flow,if (((!this.reconnecting) && this._reconnection) && (this.backoff.getAttempts() == 0)) {    this.reconnect();},206
io.socket.client.Url,Logic as Control Flow,if ((path == null) || (path.length() == 0)) {    path = "/";},42
